// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/hedera/mirror_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/LimeChain/Hederium/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockMirrorClient is a mock of MirrorNodeClient interface.
type MockMirrorClient struct {
	ctrl     *gomock.Controller
	recorder *MockMirrorClientMockRecorder
}

// MockMirrorClientMockRecorder is the mock recorder for MockMirrorClient.
type MockMirrorClientMockRecorder struct {
	mock *MockMirrorClient
}

// NewMockMirrorClient creates a new mock instance.
func NewMockMirrorClient(ctrl *gomock.Controller) *MockMirrorClient {
	mock := &MockMirrorClient{ctrl: ctrl}
	mock.recorder = &MockMirrorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMirrorClient) EXPECT() *MockMirrorClientMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockMirrorClient) GetAccount(address, timestampTo string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", address, timestampTo)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockMirrorClientMockRecorder) GetAccount(address, timestampTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockMirrorClient)(nil).GetAccount), address, timestampTo)
}

// GetAccountById mocks base method.
func (m *MockMirrorClient) GetAccountById(idOrAliasOrEvmAddress string) (*domain.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountById", idOrAliasOrEvmAddress)
	ret0, _ := ret[0].(*domain.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountById indicates an expected call of GetAccountById.
func (mr *MockMirrorClientMockRecorder) GetAccountById(idOrAliasOrEvmAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountById", reflect.TypeOf((*MockMirrorClient)(nil).GetAccountById), idOrAliasOrEvmAddress)
}

// GetBalance mocks base method.
func (m *MockMirrorClient) GetBalance(address, timestampTo string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", address, timestampTo)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockMirrorClientMockRecorder) GetBalance(address, timestampTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockMirrorClient)(nil).GetBalance), address, timestampTo)
}

// GetBlockByHashOrNumber mocks base method.
func (m *MockMirrorClient) GetBlockByHashOrNumber(hashOrNumber string) *domain.BlockResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHashOrNumber", hashOrNumber)
	ret0, _ := ret[0].(*domain.BlockResponse)
	return ret0
}

// GetBlockByHashOrNumber indicates an expected call of GetBlockByHashOrNumber.
func (mr *MockMirrorClientMockRecorder) GetBlockByHashOrNumber(hashOrNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHashOrNumber", reflect.TypeOf((*MockMirrorClient)(nil).GetBlockByHashOrNumber), hashOrNumber)
}

// GetContractById mocks base method.
func (m *MockMirrorClient) GetContractById(contractIdOrAddress string) (*domain.ContractResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractById", contractIdOrAddress)
	ret0, _ := ret[0].(*domain.ContractResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractById indicates an expected call of GetContractById.
func (mr *MockMirrorClientMockRecorder) GetContractById(contractIdOrAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractById", reflect.TypeOf((*MockMirrorClient)(nil).GetContractById), contractIdOrAddress)
}

// GetContractResult mocks base method.
func (m *MockMirrorClient) GetContractResult(transactionId string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractResult", transactionId)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetContractResult indicates an expected call of GetContractResult.
func (mr *MockMirrorClientMockRecorder) GetContractResult(transactionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractResult", reflect.TypeOf((*MockMirrorClient)(nil).GetContractResult), transactionId)
}

// GetContractResultWithRetry mocks base method.
func (m *MockMirrorClient) GetContractResultWithRetry(queryParams map[string]interface{}) (*domain.ContractResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractResultWithRetry", queryParams)
	ret0, _ := ret[0].(*domain.ContractResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractResultWithRetry indicates an expected call of GetContractResultWithRetry.
func (mr *MockMirrorClientMockRecorder) GetContractResultWithRetry(queryParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractResultWithRetry", reflect.TypeOf((*MockMirrorClient)(nil).GetContractResultWithRetry), queryParams)
}

// GetContractResults mocks base method.
func (m *MockMirrorClient) GetContractResults(timestamp domain.Timestamp) []domain.ContractResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractResults", timestamp)
	ret0, _ := ret[0].([]domain.ContractResults)
	return ret0
}

// GetContractResults indicates an expected call of GetContractResults.
func (mr *MockMirrorClientMockRecorder) GetContractResults(timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractResults", reflect.TypeOf((*MockMirrorClient)(nil).GetContractResults), timestamp)
}

// GetContractResultsLogsByAddress mocks base method.
func (m *MockMirrorClient) GetContractResultsLogsByAddress(address string, queryParams map[string]interface{}) ([]domain.ContractResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractResultsLogsByAddress", address, queryParams)
	ret0, _ := ret[0].([]domain.ContractResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractResultsLogsByAddress indicates an expected call of GetContractResultsLogsByAddress.
func (mr *MockMirrorClientMockRecorder) GetContractResultsLogsByAddress(address, queryParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractResultsLogsByAddress", reflect.TypeOf((*MockMirrorClient)(nil).GetContractResultsLogsByAddress), address, queryParams)
}

// GetContractResultsLogsWithRetry mocks base method.
func (m *MockMirrorClient) GetContractResultsLogsWithRetry(queryParams map[string]interface{}) ([]domain.ContractResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractResultsLogsWithRetry", queryParams)
	ret0, _ := ret[0].([]domain.ContractResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractResultsLogsWithRetry indicates an expected call of GetContractResultsLogsWithRetry.
func (mr *MockMirrorClientMockRecorder) GetContractResultsLogsWithRetry(queryParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractResultsLogsWithRetry", reflect.TypeOf((*MockMirrorClient)(nil).GetContractResultsLogsWithRetry), queryParams)
}

// GetContractStateByAddressAndSlot mocks base method.
func (m *MockMirrorClient) GetContractStateByAddressAndSlot(address, slot, timestampTo string) (*domain.ContractStateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractStateByAddressAndSlot", address, slot, timestampTo)
	ret0, _ := ret[0].(*domain.ContractStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractStateByAddressAndSlot indicates an expected call of GetContractStateByAddressAndSlot.
func (mr *MockMirrorClientMockRecorder) GetContractStateByAddressAndSlot(address, slot, timestampTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractStateByAddressAndSlot", reflect.TypeOf((*MockMirrorClient)(nil).GetContractStateByAddressAndSlot), address, slot, timestampTo)
}

// GetLatestBlock mocks base method.
func (m *MockMirrorClient) GetLatestBlock() (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlock")
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlock indicates an expected call of GetLatestBlock.
func (mr *MockMirrorClientMockRecorder) GetLatestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockMirrorClient)(nil).GetLatestBlock))
}

// GetNetworkFees mocks base method.
func (m *MockMirrorClient) GetNetworkFees(timestampTo, order string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkFees", timestampTo, order)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkFees indicates an expected call of GetNetworkFees.
func (mr *MockMirrorClientMockRecorder) GetNetworkFees(timestampTo, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkFees", reflect.TypeOf((*MockMirrorClient)(nil).GetNetworkFees), timestampTo, order)
}

// GetTokenById mocks base method.
func (m *MockMirrorClient) GetTokenById(tokenId string) (*domain.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenById", tokenId)
	ret0, _ := ret[0].(*domain.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenById indicates an expected call of GetTokenById.
func (mr *MockMirrorClientMockRecorder) GetTokenById(tokenId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenById", reflect.TypeOf((*MockMirrorClient)(nil).GetTokenById), tokenId)
}

// PostCall mocks base method.
func (m *MockMirrorClient) PostCall(callObject map[string]interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCall", callObject)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// PostCall indicates an expected call of PostCall.
func (mr *MockMirrorClientMockRecorder) PostCall(callObject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCall", reflect.TypeOf((*MockMirrorClient)(nil).PostCall), callObject)
}

// RepeatGetContractResult mocks base method.
func (m *MockMirrorClient) RepeatGetContractResult(transactionIdOrHash string, retries int) *domain.ContractResultResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepeatGetContractResult", transactionIdOrHash, retries)
	ret0, _ := ret[0].(*domain.ContractResultResponse)
	return ret0
}

// RepeatGetContractResult indicates an expected call of RepeatGetContractResult.
func (mr *MockMirrorClientMockRecorder) RepeatGetContractResult(transactionIdOrHash, retries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepeatGetContractResult", reflect.TypeOf((*MockMirrorClient)(nil).RepeatGetContractResult), transactionIdOrHash, retries)
}
