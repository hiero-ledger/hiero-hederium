// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/eth_common.go

package mocks

import (
	"reflect"

	"github.com/LimeChain/Hederium/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockCommonService is a mock of CommonService interface.
type MockCommonService struct {
	ctrl     *gomock.Controller
	recorder *MockCommonServiceMockRecorder
}

// MockCommonServiceMockRecorder is the mock recorder for MockCommonService.
type MockCommonServiceMockRecorder struct {
	mock *MockCommonService
}

// NewMockCommonService creates a new mock instance.
func NewMockCommonService(ctrl *gomock.Controller) *MockCommonService {
	mock := &MockCommonService{ctrl: ctrl}
	mock.recorder = &MockCommonServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonService) EXPECT() *MockCommonServiceMockRecorder {
	return m.recorder
}

// GetLogs mocks base method.
func (m *MockCommonService) GetLogs(logParams domain.LogParams) ([]domain.Log, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", logParams)
	ret0, _ := ret[0].([]domain.Log)
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockCommonServiceMockRecorder) GetLogs(logParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockCommonService)(nil).GetLogs), logParams)
}

// ValidateBlockHashAndAddTimestampToParams mocks base method.
func (m *MockCommonService) ValidateBlockHashAndAddTimestampToParams(params map[string]interface{}, blockHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBlockHashAndAddTimestampToParams", params, blockHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateBlockHashAndAddTimestampToParams indicates an expected call of ValidateBlockHashAndAddTimestampToParams.
func (mr *MockCommonServiceMockRecorder) ValidateBlockHashAndAddTimestampToParams(params, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBlockHashAndAddTimestampToParams", reflect.TypeOf((*MockCommonService)(nil).ValidateBlockHashAndAddTimestampToParams), params, blockHash)
}

// ValidateBlockRangeAndAddTimestampToParams mocks base method.
func (m *MockCommonService) ValidateBlockRangeAndAddTimestampToParams(params map[string]interface{}, fromBlock, toBlock string, address []string) (bool, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBlockRangeAndAddTimestampToParams", params, fromBlock, toBlock, address)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// ValidateBlockRangeAndAddTimestampToParams indicates an expected call of ValidateBlockRangeAndAddTimestampToParams.
func (mr *MockCommonServiceMockRecorder) ValidateBlockRangeAndAddTimestampToParams(params, fromBlock, toBlock, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBlockRangeAndAddTimestampToParams", reflect.TypeOf((*MockCommonService)(nil).ValidateBlockRangeAndAddTimestampToParams), params, fromBlock, toBlock, address)
}

// GetLogsWithParams mocks base method.
func (m *MockCommonService) GetLogsWithParams(address []string, params map[string]interface{}) ([]domain.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogsWithParams", address, params)
	ret0, _ := ret[0].([]domain.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogsWithParams indicates an expected call of GetLogsWithParams.
func (mr *MockCommonServiceMockRecorder) GetLogsWithParams(address, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogsWithParams", reflect.TypeOf((*MockCommonService)(nil).GetLogsWithParams), address, params)
}

// GetBlockNumberByNumberOrTag mocks base method.
func (m *MockCommonService) GetBlockNumberByNumberOrTag(blockNumberOrTag string) (int64, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockNumberByNumberOrTag", blockNumberOrTag)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetBlockNumberByNumberOrTag indicates an expected call of GetBlockNumberByNumberOrTag.
func (mr *MockCommonServiceMockRecorder) GetBlockNumberByNumberOrTag(blockNumberOrTag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockNumberByNumberOrTag", reflect.TypeOf((*MockCommonService)(nil).GetBlockNumberByNumberOrTag), blockNumberOrTag)
}

// ValidateBlockRange mocks base method.
func (m *MockCommonService) ValidateBlockRange(fromBlock, toBlock string) *domain.RPCError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBlockRange", fromBlock, toBlock)
	ret0, _ := ret[0].(*domain.RPCError)
	return ret0
}

// ValidateBlockRange indicates an expected call of ValidateBlockRange.
func (mr *MockCommonServiceMockRecorder) ValidateBlockRange(fromBlock, toBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBlockRange", reflect.TypeOf((*MockCommonService)(nil).ValidateBlockRange), fromBlock, toBlock)
}

// GetBlockNumber mocks base method.
func (m *MockCommonService) GetBlockNumber() (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockNumber")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetBlockNumber indicates an expected call of GetBlockNumber.
func (mr *MockCommonServiceMockRecorder) GetBlockNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockNumber", reflect.TypeOf((*MockCommonService)(nil).GetBlockNumber))
} 